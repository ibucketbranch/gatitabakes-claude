# Bread Ordering App - Implementation Guide

**Title:** Gatita Bakes  
**Author/Developer:** Bucketbranch  
**Version:** 1.0.0  
**Date:** May 7, 2025

This guide will walk you through the complete process of setting up, customizing, and deploying your bread ordering application.

## Phase 1: Local Setup

### Step 1: Create React App
```bash
# Create a new React application
npx create-react-app bread-ordering-app

# Navigate to the new project directory
cd bread-ordering-app
```

### Step 2: Install Dependencies
```bash
# Install required packages
npm install emailjs-com lucide-react react-router-dom
```

### Step 3: Add Component Files
1. Create a components folder in the src directory
```bash
mkdir -p src/components
```

2. Create the BreadOrderForm.js and BreadOrderForm.css files in this directory
```bash
touch src/components/BreadOrderForm.js
touch src/components/BreadOrderForm.css
```

3. Copy the code from the BreadOrderForm.js and BreadOrderForm.css files provided in this guide

### Step 4: Update App.js
Replace the contents of src/App.js with the code provided in the App.js file

### Step 5: Add Product Images
1. Add your bread product images to the public folder
2. If you don't have images yet, use placeholders:
```bash
# Create placeholder images in the public folder (or use actual images)
touch public/bread1.jpg
touch public/bread2.jpg
touch public/bread3.jpg
touch public/bread4.jpg
touch public/bread5.jpg
touch public/bread6.jpg
```

### Step 6: Test Locally
```bash
# Start the development server
npm start
```
This will open your app at http://localhost:3000

## Phase 2: Email Integration

### Step 1: Create EmailJS Account
1. Visit https://www.emailjs.com/ and sign up for a free account
2. Verify your email address

### Step 2: Set Up Email Service
1. In the EmailJS dashboard, go to "Email Services"
2. Click "Add New Service"
3. Choose your email provider (Gmail, Outlook, etc.)
4. Follow the prompts to connect your email account

### Step 3: Create Email Templates
#### Customer Template
1. Go to "Email Templates" in the dashboard
2. Click "Create New Template"
3. Set template name as "customer_order_confirmation"
4. Add subject: "Your Artisan Bread Co. Order #{{order_number}}"
5. Create the email body using the variables:
   - {{to_name}}
   - {{order_number}}
   - {{order_details}}
   - {{total_amount}}
   - {{delivery_info}}
   - {{venmo_username}}

#### Admin Template
1. Create another template named "admin_order_notification"
2. Add subject: "New Order #{{order_number}} Received"
3. Create email body with variables:
   - {{order_number}}
   - {{to_name}}
   - {{customer_email}}
   - {{customer_phone}}
   - {{order_details}}
   - {{total_amount}}
   - {{delivery_info}}

### Step 4: Configure Environment Variables
1. Create a .env file in your project root:
```bash
touch .env
```

2. Add your EmailJS credentials:
```
REACT_APP_EMAILJS_USER_ID=your_user_id
REACT_APP_EMAILJS_SERVICE_ID=your_service_id
REACT_APP_EMAILJS_CUSTOMER_TEMPLATE_ID=your_customer_template_id
REACT_APP_EMAILJS_ADMIN_TEMPLATE_ID=your_admin_template_id
```

3. Update the BreadOrderForm.js file to use these environment variables:
```javascript
// Replace the placeholder values with environment variables
const serviceId = process.env.REACT_APP_EMAILJS_SERVICE_ID;
const customerTemplateId = process.env.REACT_APP_EMAILJS_CUSTOMER_TEMPLATE_ID;
const adminTemplateId = process.env.REACT_APP_EMAILJS_ADMIN_TEMPLATE_ID;
const userId = process.env.REACT_APP_EMAILJS_USER_ID;
```

4. Add EmailJS initialization to index.js:
```javascript
// Add this to src/index.js after the imports
import emailjs from 'emailjs-com';
emailjs.init(process.env.REACT_APP_EMAILJS_USER_ID);
```

## Phase 3: Customization

### Step 1: Update Bread Products
Edit the breadCategories array in BreadOrderForm.js to include your actual bread products:
```javascript
const breadCategories = [
  {
    id: 'category-id',
    name: 'Category Name',
    products: [
      { 
        id: 'product-id', 
        name: 'Product Name', 
        price: 0.00, 
        image: '/image-path.jpg', 
        description: 'Product description' 
      },
      // Add more products...
    ]
  },
  // Add more categories...
];
```

### Step 2: Update Venmo Information
Replace the placeholder Venmo username in the sendOrderEmails function:
```javascript
const templateParams = {
  // ...
  venmo_username: '@your-actual-venmo-username'
  // ...
};
```

### Step 3: Customize Pickup Locations
Update the pickup location options in the renderDeliveryForm function:
```javascript
<select
  value={pickupLocation}
  onChange={(e) => setPickupLocation(e.target.value)}
  className="pickup-select"
>
  <option value="location1">Your First Location (Address)</option>
  <option value="location2">Your Second Location (Address)</option>
  <option value="location3">Your Third Location (Address)</option>
</select>
```

### Step 4: Update Color Scheme (Optional)
Modify the colors in BreadOrderForm.css to match your brand:
```css
/* Find and replace these color values */
--primary-color: #8b4513; /* Update with your brand's primary color */
--secondary-color: #f8f3e8; /* Update with your brand's secondary color */
--background-color: #faf6f0; /* Update with your preferred background color */
```

## Phase 4: Deployment

### Step 1: Create GitHub Repository
1. Sign up for GitHub if you don't have an account
2. Create a new repository at https://github.com/new
3. Name your repository (e.g., "bread-ordering-app")
4. Make it public
5. Click "Create repository"

### Step 2: Push Code to GitHub
```bash
# Initialize git in your project
git init

# Add all files to git
git add .

# Create first commit
git commit -m "Initial commit"

# Add your GitHub repository as remote
git remote add origin https://github.com/YOUR_USERNAME/bread-ordering-app.git

# Push code to GitHub
git push -u origin main
```

### Step 3: Set Up Netlify
1. Sign up for Netlify at https://app.netlify.com/signup
2. Click "New site from Git"
3. Select GitHub as your provider
4. Authorize Netlify to access your GitHub
5. Select your bread-ordering-app repository

### Step 4: Configure Netlify Build Settings
1. Set build command to: `npm run build`
2. Set publish directory to: `build`
3. Click "Show advanced" to add environment variables
4. Add all your EmailJS environment variables:
   - REACT_APP_EMAILJS_USER_ID
   - REACT_APP_EMAILJS_SERVICE_ID
   - REACT_APP_EMAILJS_CUSTOMER_TEMPLATE_ID
   - REACT_APP_EMAILJS_ADMIN_TEMPLATE_ID
5. Click "Deploy site"

### Step 5: Domain Setup (Optional)
1. In your Netlify site dashboard, go to "Domain settings"
2. Click "Add custom domain"
3. Enter your domain and follow the instructions

## Phase 5: Testing & Maintenance

### Step 1: Test the Complete Flow
1. Visit your deployed site
2. Add items to cart
3. Complete the order form
4. Submit an order
5. Verify that you receive both customer and admin emails

### Step 2: Making Updates
To update your site after making changes:
```bash
# After making changes to your code
git add .
git commit -m "Description of changes"
git push
```
Netlify will automatically rebuild and deploy your site

### Step 3: Monitoring
1. Check your Netlify analytics to monitor site traffic
2. Monitor your EmailJS dashboard to track email usage

## Common Issues & Solutions

### Problem: Images Not Loading
- Make sure image paths are correct
- Check that image files exist in the public folder
- Add error handling to image tags (already included in the provided code)

### Problem: Emails Not Sending
- Verify EmailJS credentials are correct
- Check browser console for errors
- Make sure your email service is properly connected

### Problem: Build Failures on Netlify
- Check local build with `npm run build`
- Review Netlify build logs
- Add `CI=false` to environment variables to ignore warnings

## Next Steps for Future Enhancement

1. **Add User Authentication**: Allow customers to create accounts and view order history
2. **Implement Real Payment Processing**: Integrate with Stripe or PayPal
3. **Add Admin Dashboard**: Create a backend for managing orders
4. **Set Up Order Scheduling**: Allow customers to select delivery/pickup dates and times
5. **Add Analytics**: Track popular products and customer behavior

Congratulations! You now have a fully functional bread ordering system with payment instructions via Venmo.
